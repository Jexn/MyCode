<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--  Spring对bean的管理细节  -->
    <!--
            1. 创建bean的三种方式
            2. bean对象的作用范围
            3. bean对象的生命周期
      -->

    <!--  创建bean的三种方式  -->
    <!--  a. 使用默认构造函数创建，在Spring的配置文件中使用bean标签，配置完id和class
    属性之后，且没有其他属性和标签时，采用默认构造函数创建bean，此时类中必须要有默认的构造函数，否则报错  -->
    <bean id="person" class="com.cube.bean.Person"/>

    <!--  b. 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入Spring容器）  -->
    <bean id="personFactory" class="com.cube.Factory.PersonFactory"/>
    <bean id="personFactoryBean" factory-bean="personFactory"
          factory-method="getInstance"/>

    <!--  c. 使用静态工厂的静态方法创建对象  -->
    <bean id="staticFactoryBean" class="com.cube.Factory.PersonFactory"
          factory-method="getInStance"/>

    <!--  bean对象的作用范围  -->
    <!--  默认的bean的作用范围是单例的  -->
    <!--  bean标签的scope属性：
            作用：用于指定bean的作用范围
            value: singleton：默认，单例
                   prototype：多例
                   request：作用于web应用的请求范围
                   session：作用web应用的会话范围
                   global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境，它就是session
      -->
    <bean id="personScope" class="com.cube.bean.Person" scope="prototype"/>

    <!--  bean对象的生命周期  -->
    <!--
         单例对象
            出生：当容器创建时对象出生
            活着：只要容器还在，对象一直活着
            死亡：容器销毁，对象消亡
            总结：单例对象的生命周期和容器相同
         多例对象：
            出生：当用户使用对象时，spring框架为我们创建
            活着：对象只要在使用，就一直活着
            死亡：当对象长时间不用，且没有别的对象引用时，由Java垃圾收集回收
      -->
    <bean id="personLift" class="com.cube.bean.Person" scope="prototype" init-method="init" destroy-method="destroy"/>

</beans>