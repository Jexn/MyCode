<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

    <bean id="accountService" class="com.cube.service.AccountServiceImpl"/>

    <!--  Spring AOP配置  -->
    <!--  配置过程
            1. 把通知Bean也也交给Spring来管理
            2. 使用aop:config标签表明开始AOP的配置
            3. 使用aop:aspect标签表明配置切面
                       id属性：给切面提供一个唯一标识;
                       ref属性：指定通知类bean的id;
            4. 再aop:aspect内部使用对应标签来配置通知的类型
                     前置通知举例：aop:before
                        method属性：指定Logger类中哪个方法是前置通知
                        pointcut属性：用于指定切入点表达式，该表达式的含义指的是业务层中的哪些方法增强
                    切入点表达式：
                        关键字：execution（表达式）
                        表达式：
                                访问修饰符 返回值 包名.包名.包名...类名.方法名（参数列表）
                                注：
                                    访问修饰符可省略；
                                    返回值可用通配符*表示；
                                    包名可用通配符*表示，有几级包写几个通配符；包名也可以使用..表示当前包及其子包
                                    类名和方法名都可以使用*来实现通配
                                    参数列表：
                                        可以直接写数据类型：
                                            基本类型直接写名称
                                            引用类型写包名.类名的方式   java.lang.String
                                         也可以使用通配符表示任意类型，但必须要有参数
                                         也可以使用..表示有无参数均可，有参数可以是任意类型
                        标准表达式写法：
                                public void com.cube.service.AccountServiceImpl.saveAccount()
      -->

    <!--  配置Logger类  -->
    <bean id="logger" class="com.cube.utils.Logger"/>

    <!--  开始AOP配置  -->
    <aop:config>
        <aop:pointcut id="saveAccount" expression="execution(public void com.cube.service.AccountServiceImpl.saveAccount())"/>
        <!--    配置切面    -->
        <aop:aspect id="log" ref="logger">
            <!--     配置通知类型，并且建立通知方法和切入点方法的关联       -->
            <!--     前置通知       -->
            <aop:before method="printLog" pointcut-ref="saveAccount"/>

            <!--     后置返回通知       -->
            <aop:after-returning method="afterReturningLog" pointcut-ref="saveAccount"/>

            <!--     异常通知       -->
            <aop:after-throwing method="throwingLog" pointcut-ref="saveAccount"/>

            <!--     最终通知       -->
            <aop:after method="finalLog" pointcut-ref="saveAccount"/>

            <!--            <aop:after method="afterLog" pointcut="execution(* *..*.*(..))"/>-->
        </aop:aspect>

    </aop:config>

</beans>